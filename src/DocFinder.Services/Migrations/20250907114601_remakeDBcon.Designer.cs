// <auto-generated />
using System;
using DocFinder.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DocFinder.Services.Migrations
{
    [DbContext(typeof(DocumentDbContext))]
    [Migration("20250907114601_remakeDBcon")]
    partial class remakeDBcon
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("DocFinder.Domain.AuditEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AuditEntries");
                });

            modelBuilder.Entity("DocFinder.Domain.Data", b =>
                {
                    b.Property<Guid>("FileId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("DataBytes")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("DataVersion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("FileId");

                    b.ToTable("Data");
                });

            modelBuilder.Entity("DocFinder.Domain.File", b =>
                {
                    b.Property<Guid>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ext")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB")
                        .HasDefaultValue(new byte[0]);

                    b.Property<string>("Sha256")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("SizeBytes")
                        .HasColumnType("INTEGER");

                    b.HasKey("FileId");

                    b.HasIndex("FilePath");

                    b.HasIndex("Sha256")
                        .IsUnique();

                    b.HasIndex("Name", "Ext");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("DocFinder.Domain.FileList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.ToTable("FileLists");
                });

            modelBuilder.Entity("DocFinder.Domain.FileListItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedUtc")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FileId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FileId1")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FileListId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ListId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PinnedSha256")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("FileId1");

                    b.HasIndex("FileListId");

                    b.HasIndex("ListId", "FileId")
                        .IsUnique();

                    b.HasIndex("ListId", "Order")
                        .IsUnique();

                    b.ToTable("FileListItems");
                });

            modelBuilder.Entity("DocFinder.Domain.Protocol", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AssetId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AttachmentsListId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Contract")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EffectiveFromUtc")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ElectronicVersion")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ExpiresOnUtc")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FileId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("IssueDateUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("IssuedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LegalBasis")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrganizationalUnit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Print")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ResponsiblePerson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Version")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentsListId");

                    b.HasIndex("FileId");

                    b.ToTable("Protocols");
                });

            modelBuilder.Entity("DocFinder.Domain.ProtocolList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.ToTable("ProtocolLists", (string)null);
                });

            modelBuilder.Entity("DocFinder.Domain.ProtocolListItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ListId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PinnedFileSha256")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("PinnedVersion")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProtocolId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProtocolListId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.HasIndex("ProtocolId");

                    b.HasIndex("ProtocolListId");

                    b.HasIndex("ListId", "Order")
                        .IsUnique();

                    b.HasIndex("ListId", "ProtocolId")
                        .IsUnique();

                    b.ToTable("ProtocolListItems", (string)null);
                });

            modelBuilder.Entity("DocFinder.Domain.Data", b =>
                {
                    b.HasOne("DocFinder.Domain.File", "File")
                        .WithOne("Data")
                        .HasForeignKey("DocFinder.Domain.Data", "FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("DocFinder.Domain.FileListItem", b =>
                {
                    b.HasOne("DocFinder.Domain.File", null)
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DocFinder.Domain.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocFinder.Domain.FileList", null)
                        .WithMany("Items")
                        .HasForeignKey("FileListId");

                    b.HasOne("DocFinder.Domain.FileList", null)
                        .WithMany()
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("DocFinder.Domain.Protocol", b =>
                {
                    b.HasOne("DocFinder.Domain.FileList", "AttachmentsList")
                        .WithMany()
                        .HasForeignKey("AttachmentsListId");

                    b.HasOne("DocFinder.Domain.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttachmentsList");

                    b.Navigation("File");
                });

            modelBuilder.Entity("DocFinder.Domain.ProtocolListItem", b =>
                {
                    b.HasOne("DocFinder.Domain.ProtocolList", null)
                        .WithMany()
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocFinder.Domain.Protocol", "Protocol")
                        .WithMany()
                        .HasForeignKey("ProtocolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DocFinder.Domain.ProtocolList", null)
                        .WithMany("Items")
                        .HasForeignKey("ProtocolListId");

                    b.Navigation("Protocol");
                });

            modelBuilder.Entity("DocFinder.Domain.File", b =>
                {
                    b.Navigation("Data")
                        .IsRequired();
                });

            modelBuilder.Entity("DocFinder.Domain.FileList", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("DocFinder.Domain.ProtocolList", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
